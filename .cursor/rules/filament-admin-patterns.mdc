---
globs: app/Filament/Resources/*.php,app/Filament/Resources/*/Pages/*.php,app/Filament/Resources/*/RelationManagers/*.php
---

# Filament Admin Panel Patterns

This project uses Filament 3.x for the admin panel. Follow these patterns for consistent admin interface development.

## Resource Structure

### Base Resource Template
```php
<?php

namespace App\Filament\Resources;

use App\Models\ModelName;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;

class ModelNameResource extends Resource
{
    protected static ?string $model = ModelName::class;
    protected static ?string $navigationIcon = 'heroicon-o-icon-name';
    protected static ?string $navigationGroup = 'Group Name';
    protected static ?int $navigationSort = 1;

    // Authorization methods
    public static function canViewAny(): bool
    {
        return auth()->user()->can('model-name.view');
    }
    
    public static function form(Form $form): Form { /*...*/ }
    public static function table(Table $table): Table { /*...*/ }
    public static function getRelations(): array { /*...*/ }
    public static function getPages(): array { /*...*/ }
}
```

## Form Patterns

### Product Resource Form ([ProductResource.php](mdc:app/Filament/Resources/ProductResource.php))
```php
public static function form(Form $form): Form
{
    return $form->schema([
        Group::make()->schema([
            Section::make('Product Information')->schema([
                TextInput::make('name')
                    ->required()
                    ->live(onBlur: true)
                    ->afterStateUpdated(function (string $state, $set) {
                        $set('slug', Str::slug($state));
                    }),
                    
                TextInput::make('slug')
                    ->disabled()
                    ->dehydrated()
                    ->unique(Product::class, 'slug', ignoreRecord: true),
                    
                // More fields...
            ])->columns(2),
            
            Section::make('Variants Configuration')->schema([
                Toggle::make('has_variants')
                    ->live()
                    ->helperText('Enable if this product has variants'),
                    
                Forms\Components\KeyValue::make('attributes')
                    ->label('Product Attributes (JSON)')
                    ->visible(fn ($get) => $get('has_variants'))
                    ->keyLabel('Attribute')
                    ->valueLabel('Value'),
            ]),
        ])->columnSpan(2),
        
        Group::make()->schema([
            Section::make('Pricing')->schema([
                TextInput::make('price')
                    ->numeric()
                    ->required()
                    ->prefix('INR'),
            ]),
        ])->columnSpan(1)
    ])->columns(3);
}
```

### Form Component Patterns
```php
// Text inputs with validation
TextInput::make('field_name')
    ->required()
    ->maxLength(255)
    ->placeholder('Enter value')
    ->helperText('Additional information'),

// Select with relationships
Select::make('category_id')
    ->relationship('category', 'name')
    ->searchable()
    ->preload()
    ->required(),

// File uploads
FileUpload::make('images')
    ->multiple()
    ->disk('public')
    ->directory('products')
    ->maxFiles(5)
    ->reorderable(),

// Toggles with live updates
Toggle::make('is_active')
    ->live()
    ->afterStateUpdated(function ($state, $set) {
        // React to toggle changes
    }),
```

## Table Patterns

### Product Resource Table
```php
public static function table(Table $table): Table
{
    return $table
        ->columns([
            TextColumn::make('name')->searchable(),
            TextColumn::make('category.name')->sortable(),
            TextColumn::make('price')->money('INR')->sortable(),
            
            // Badge columns for status
            TextColumn::make('stock_status')
                ->badge()
                ->color(fn (string $state): string => match ($state) {
                    'in_stock' => 'success',
                    'out_of_stock' => 'danger',
                    'back_order' => 'warning',
                }),
                
            // Icon columns for boolean values
            IconColumn::make('is_active')
                ->boolean()
                ->trueIcon('heroicon-o-check-circle')
                ->falseIcon('heroicon-o-x-circle'),
        ])
        ->filters([
            // Essential filters only - avoid cluttering the UI
            SelectFilter::make('category')
                ->relationship('category', 'name')
                ->searchable()
                ->preload(),
                
            SelectFilter::make('brand')
                ->relationship('brand', 'name')
                ->searchable()
                ->preload(),
                
            // Price range filter for ecommerce
            Filter::make('price_range')
                ->form([
                    Forms\Components\Grid::make(2)->schema([
                        Forms\Components\TextInput::make('price_from')
                            ->label('Min Price')
                            ->numeric(),
                        Forms\Components\TextInput::make('price_to')
                            ->label('Max Price')
                            ->numeric(),
                    ])
                ])
                ->query(function (Builder $query, array $data): Builder {
                    return $query
                        ->when($data['price_from'], fn($q, $price) => $q->where('price_cents', '>=', $price * 100))
                        ->when($data['price_to'], fn($q, $price) => $q->where('price_cents', '<=', $price * 100));
                }),
                
            // Stock status for inventory management
            SelectFilter::make('stock_status')
                ->options([
                    'in_stock' => 'In Stock',
                    'out_of_stock' => 'Out of Stock',
                    'back_order' => 'Back Order',
                ])
                ->default('in_stock'),
        ])
        ->actions([
            ActionGroup::make([
                ViewAction::make(),
                EditAction::make(),
                Action::make('custom_action')
                    ->action(function ($record) {
                        // Custom action logic
                    })
                    ->requiresConfirmation(),
            ])
        ])
        ->bulkActions([
            BulkActionGroup::make([
                DeleteBulkAction::make(),
            ]),
        ]);
}
```

## Relation Managers

### Variants Relation Manager Pattern
```php
public function form(Form $form): Form
{
    return $form->schema([
        Section::make('Variant Options')->schema([
            Forms\Components\KeyValue::make('options')
                ->label('Variant Options')
                ->keyLabel('Option')
                ->valueLabel('Value')
                ->required(),
                
            TextInput::make('override_price_dollars')
                ->label('Override Price (USD)')
                ->numeric()
                ->step(0.01)
                ->afterStateUpdated(fn ($state, $set) => 
                    $set('override_price', $state ? round($state * 100) : null)
                )
                ->dehydrated(false),
                
            Hidden::make('override_price'),
        ]),
    ]);
}

public function table(Table $table): Table
{
    return $table
        ->columns([
            TextColumn::make('sku')->sortable(),
            TextColumn::make('options')
                ->formatStateUsing(function ($state) {
                    if (empty($state)) return 'â€”';
                    return collect($state)
                        ->map(fn ($value, $key) => "{$key}: {$value}")
                        ->join(', ');
                }),
            TextColumn::make('final_price_in_dollars')
                ->money('USD'),
        ]);
}
```

## Authorization Patterns

### Permission-Based Access Control
```php
// Resource level permissions
public static function canViewAny(): bool
{
    return auth()->user()->can('products.view');
}

public static function canCreate(): bool
{
    return auth()->user()->can('products.create');
}

public static function canEdit($record): bool
{
    return auth()->user()->can('products.edit');
}

// Action level permissions
Action::make('special_action')
    ->visible(fn ($record) => auth()->user()->can('products.special'))
    ->action(function ($record) {
        // Action logic
    });
```

## Custom Actions

### Bulk Actions
```php
// In table() method
->bulkActions([
    BulkAction::make('mark_featured')
        ->label('Mark as Featured')
        ->icon('heroicon-o-star')
        ->action(function (Collection $records) {
            $records->each->update(['is_featured' => true]);
            
            Notification::make()
                ->title('Products marked as featured')
                ->success()
                ->send();
        })
        ->requiresConfirmation()
        ->deselectRecordsAfterCompletion(),
])
```

### Custom Page Actions
```php
// In getHeaderActions() method
protected function getHeaderActions(): array
{
    return [
        Action::make('export')
            ->label('Export Products')
            ->icon('heroicon-o-document-arrow-down')
            ->action(function () {
                // Export logic
            }),
    ];
}
```

## Navigation & Groups

### Navigation Organization
```php
// In Resource class
protected static ?string $navigationGroup = 'Product Management';
protected static ?int $navigationSort = 1;
protected static ?string $navigationLabel = 'Products';
protected static ?string $navigationIcon = 'heroicon-o-shopping-bag';

// Hide from navigation
protected static bool $shouldRegisterNavigation = false;
```

## Notifications

### Success/Error Notifications
```php
// In actions
Action::make('regenerate_sku')
    ->action(function ($record) {
        $oldSku = $record->sku;
        $record->regenerateSku();
        
        Notification::make()
            ->title('SKU Regenerated')
            ->body("Updated from '{$oldSku}' to '{$record->sku}'")
            ->success()
            ->send();
    });
```

## Widgets

### Stats Widgets
```php
<?php

namespace App\Filament\Widgets;

use Filament\Widgets\StatsOverviewWidget;

class OrderStats extends StatsOverviewWidget
{
    protected function getStats(): array
    {
        return [
            Stat::make('Total Orders', Order::count())
                ->description('All time orders')
                ->color('success'),
                
            Stat::make('Revenue', Order::sum('total_amount'))
                ->description('Total revenue')
                ->money('INR'),
        ];
    }
}
```

## Best Practices

### Form Organization
1. Use `Group` and `Section` components for logical grouping
2. Set appropriate column spans (2/3 split is common)
3. Use `live()` for reactive form fields
4. Implement proper validation and helper text

### Table Optimization
1. Use `searchable()` and `sortable()` on key columns
2. Implement proper filters for data discovery
3. Use appropriate column types (badge, icon, money)
4. Provide meaningful bulk actions

### Performance
1. Use `preload()` for select relationships
2. Implement efficient queries in custom filters
3. Use eager loading where appropriate
4. Cache expensive computations

### User Experience
1. Provide clear helper text and placeholders
2. Use confirmation dialogs for destructive actions
3. Show meaningful notifications for user feedback
4. Organize navigation logically with proper grouping
5. **Limit filters to essentials** - Keep only Category, Brand, Price Range, and Stock Status
6. Use searchable/preload for relationship filters with many options
7. Set reasonable defaults for common filter states